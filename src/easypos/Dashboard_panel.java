/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package easypos;

import DB.MC_DB;
import animeted.chart.ModelChart;
import java.awt.Color;
import java.sql.ResultSet;
import java.text.DateFormatSymbols;
import java.text.DecimalFormat;
import java.text.NumberFormat;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Vector;
import javaswingdev.chart.ModelPieChart;
import javaswingdev.chart.PieChart;
import javax.swing.table.DefaultTableCellRenderer;
import javax.swing.table.DefaultTableModel;

/**
 *
 * @author hello
 */
public class Dashboard_panel extends javax.swing.JPanel {

    /**
     * Creates new form Dashboard_panel
     */
    public Dashboard_panel() {
        initComponents();
        loadGrns();
        loadSale();
        loadCredit();
        loadCard();
        loadExpenses();
        loadCash();
        set_all_chart_design();
        set_stock_value();

        set_sale();
        set_expenses_data();
        set_yearly_sale_total();
        set_highest_month();
        set_pie_chart_data();
        loadTopSales();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton9 = new javax.swing.JButton();
        jButton10 = new javax.swing.JButton();
        jButton12 = new javax.swing.JButton();
        jButton11 = new javax.swing.JButton();
        jButton13 = new javax.swing.JButton();
        jButton14 = new javax.swing.JButton();
        jButton15 = new javax.swing.JButton();
        jButton16 = new javax.swing.JButton();
        jButton17 = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        chart = new animeted.chart.Chart();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        lbl_total_sale_in_this_year = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        lbl_month = new javax.swing.JLabel();
        lbl_month_total = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jButton3 = new javax.swing.JButton();
        jButton4 = new javax.swing.JButton();
        jButton5 = new javax.swing.JButton();
        jButton6 = new javax.swing.JButton();
        jButton7 = new javax.swing.JButton();
        jButton8 = new javax.swing.JButton();
        jPanel5 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel6 = new javax.swing.JPanel();
        pieChart1 = new javaswingdev.chart.PieChart();
        jLabel9 = new javax.swing.JLabel();
        lbl_stock_value = new javax.swing.JLabel();
        jPanel7 = new javax.swing.JPanel();
        curveLineChart1 = new raven.chart.CurveLineChart();
        jPanel8 = new javax.swing.JPanel();
        chart1 = new animeted.chart.Chart();
        jLabel8 = new javax.swing.JLabel();
        jPanel9 = new javax.swing.JPanel();
        curveLineChart2 = new raven.chart.CurveLineChart();

        jButton9.setBackground(new java.awt.Color(0, 0, 102));
        jButton9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-invoice-32.png"))); // NOI18N
        jButton9.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));

        jButton10.setBackground(new java.awt.Color(0, 0, 102));
        jButton10.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-product-32 (1).png"))); // NOI18N
        jButton10.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));

        jButton12.setBackground(new java.awt.Color(0, 0, 102));
        jButton12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-blockchain-technology-32.png"))); // NOI18N
        jButton12.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));

        jButton11.setBackground(new java.awt.Color(0, 0, 102));
        jButton11.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-general-mandatory-action-32.png"))); // NOI18N
        jButton11.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));

        jButton13.setBackground(new java.awt.Color(0, 0, 102));
        jButton13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-alarm-clock-32.png"))); // NOI18N
        jButton13.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));

        jButton14.setBackground(new java.awt.Color(0, 0, 102));
        jButton14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-timesheet-32.png"))); // NOI18N
        jButton14.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));

        jButton15.setBackground(new java.awt.Color(0, 0, 102));
        jButton15.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-price-tag-euro-32.png"))); // NOI18N
        jButton15.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));

        jButton16.setBackground(new java.awt.Color(0, 0, 102));
        jButton16.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-help-32.png"))); // NOI18N
        jButton16.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));

        jButton17.setBackground(new java.awt.Color(0, 0, 102));
        jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-details-32.png"))); // NOI18N
        jButton17.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));

        jPanel2.setBackground(new java.awt.Color(0, 0, 153));

        jPanel3.setBackground(new java.awt.Color(0, 0, 102));

        chart.setBackground(new java.awt.Color(204, 204, 204));

        jPanel4.setBackground(new java.awt.Color(0, 0, 102));

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("Total Sales");

        lbl_total_sale_in_this_year.setFont(new java.awt.Font("Tahoma", 1, 48)); // NOI18N
        lbl_total_sale_in_this_year.setForeground(new java.awt.Color(255, 0, 0));
        lbl_total_sale_in_this_year.setText("108.4K");
        lbl_total_sale_in_this_year.setToolTipText("Total Sales In this Year");

        jLabel3.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Top Sales Month :");

        lbl_month.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbl_month.setForeground(new java.awt.Color(255, 255, 255));
        lbl_month.setText("Month");

        lbl_month_total.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lbl_month_total.setForeground(new java.awt.Color(255, 255, 255));
        lbl_month_total.setText("0.00");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(lbl_month_total, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_month, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(lbl_total_sale_in_this_year, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 189, Short.MAX_VALUE))
                        .addContainerGap())))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_total_sale_in_this_year, javax.swing.GroupLayout.PREFERRED_SIZE, 97, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_month, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(lbl_month_total, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("Income");

        jButton1.setBackground(new java.awt.Color(0, 0, 102));
        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-test-passed-32.png"))); // NOI18N
        jButton1.setToolTipText("Product List");
        jButton1.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setBackground(new java.awt.Color(0, 0, 102));
        jButton2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-checklist-32.png"))); // NOI18N
        jButton2.setToolTipText("Customer List");
        jButton2.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jButton3.setBackground(new java.awt.Color(0, 0, 102));
        jButton3.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-checklist-32 (1).png"))); // NOI18N
        jButton3.setToolTipText("Supplier List");
        jButton3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        jButton4.setBackground(new java.awt.Color(0, 0, 102));
        jButton4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-move-up-row-32.png"))); // NOI18N
        jButton4.setToolTipText("Re Order List");
        jButton4.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        jButton4.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton4ActionPerformed(evt);
            }
        });

        jButton5.setBackground(new java.awt.Color(0, 0, 102));
        jButton5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-cash-app-32.png"))); // NOI18N
        jButton5.setToolTipText("Cash In/Out");
        jButton5.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        jButton5.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton5ActionPerformed(evt);
            }
        });

        jButton6.setBackground(new java.awt.Color(0, 0, 102));
        jButton6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-procurement-32.png"))); // NOI18N
        jButton6.setToolTipText("Purches List");
        jButton6.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        jButton6.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton6ActionPerformed(evt);
            }
        });

        jButton7.setBackground(new java.awt.Color(0, 0, 102));
        jButton7.setForeground(new java.awt.Color(0, 0, 102));
        jButton7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-do-not-mix-32.png"))); // NOI18N
        jButton7.setToolTipText("Order List");
        jButton7.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        jButton7.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton7ActionPerformed(evt);
            }
        });

        jButton8.setBackground(new java.awt.Color(0, 0, 102));
        jButton8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-delete-file-32.png"))); // NOI18N
        jButton8.setToolTipText("Void Bill");
        jButton8.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(255, 255, 255), 2, true));
        jButton8.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton8ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(chart, javax.swing.GroupLayout.DEFAULT_SIZE, 814, Short.MAX_VALUE)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jButton3, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jButton4, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jButton5, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jButton6, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jButton7, javax.swing.GroupLayout.PREFERRED_SIZE, 42, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, 0)
                        .addComponent(jButton8, javax.swing.GroupLayout.PREFERRED_SIZE, 41, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(jButton1, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 46, Short.MAX_VALUE)
                        .addComponent(jButton2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton4, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton5, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton6, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton7, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton8, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(chart, javax.swing.GroupLayout.PREFERRED_SIZE, 219, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel5.setBackground(new java.awt.Color(204, 204, 204));

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setText("Fast Moving Items");

        jTable1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jTable1.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Name", "Qty"
            }
        ));
        jTable1.setRowHeight(30);
        jScrollPane2.setViewportView(jTable1);

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 155, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 189, Short.MAX_VALUE))
            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel5Layout.createSequentialGroup()
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
        );

        jPanel6.setBackground(new java.awt.Color(255, 255, 255));

        pieChart1.setBackground(new java.awt.Color(204, 204, 204));
        pieChart1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(204, 0, 0));
        jLabel9.setText("Reference");

        lbl_stock_value.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_stock_value.setForeground(new java.awt.Color(0, 0, 102));
        lbl_stock_value.setHorizontalAlignment(javax.swing.SwingConstants.RIGHT);
        lbl_stock_value.setText("Total Stock Value :100,000.00");

        javax.swing.GroupLayout jPanel6Layout = new javax.swing.GroupLayout(jPanel6);
        jPanel6.setLayout(jPanel6Layout);
        jPanel6Layout.setHorizontalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pieChart1, javax.swing.GroupLayout.DEFAULT_SIZE, 363, Short.MAX_VALUE)
            .addGroup(jPanel6Layout.createSequentialGroup()
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 119, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(lbl_stock_value, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel6Layout.setVerticalGroup(
            jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel6Layout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addGroup(jPanel6Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(lbl_stock_value, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(pieChart1, javax.swing.GroupLayout.PREFERRED_SIZE, 222, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        jPanel7.setBackground(new java.awt.Color(255, 255, 255));

        curveLineChart1.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel7Layout = new javax.swing.GroupLayout(jPanel7);
        jPanel7.setLayout(jPanel7Layout);
        jPanel7Layout.setHorizontalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(curveLineChart1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel7Layout.setVerticalGroup(
            jPanel7Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(curveLineChart1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );

        jPanel8.setBackground(new java.awt.Color(255, 255, 255));

        chart1.setBackground(new java.awt.Color(204, 204, 204));

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(0, 0, 153));
        jLabel8.setText("Total Revenue");

        jPanel9.setBackground(new java.awt.Color(255, 255, 255));

        curveLineChart2.setBackground(new java.awt.Color(204, 204, 204));

        javax.swing.GroupLayout jPanel9Layout = new javax.swing.GroupLayout(jPanel9);
        jPanel9.setLayout(jPanel9Layout);
        jPanel9Layout.setHorizontalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(curveLineChart2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel9Layout.setVerticalGroup(
            jPanel9Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel9Layout.createSequentialGroup()
                .addComponent(curveLineChart2, javax.swing.GroupLayout.PREFERRED_SIZE, 241, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel8Layout = new javax.swing.GroupLayout(jPanel8);
        jPanel8.setLayout(jPanel8Layout);
        jPanel8Layout.setHorizontalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 172, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel8Layout.createSequentialGroup()
                .addComponent(chart1, javax.swing.GroupLayout.PREFERRED_SIZE, 709, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel8Layout.setVerticalGroup(
            jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel8Layout.createSequentialGroup()
                .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, 30, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel8Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(chart1, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel6, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(6, 6, 6)
                .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        jScrollPane1.setViewportView(jPanel2);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 1013, Short.MAX_VALUE)
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 826, Short.MAX_VALUE)
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        new product_list().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        new customer_list().setVisible(true);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton5ActionPerformed
        new cash_in_outs().setVisible(true);
    }//GEN-LAST:event_jButton5ActionPerformed

    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        new supplier_list().setVisible(true);
    }//GEN-LAST:event_jButton3ActionPerformed

    private void jButton4ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton4ActionPerformed
        new re_order_items().setVisible(true);
    }//GEN-LAST:event_jButton4ActionPerformed

    private void jButton6ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton6ActionPerformed
        new purchesList().setVisible(true);
    }//GEN-LAST:event_jButton6ActionPerformed

    private void jButton7ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton7ActionPerformed
        new order_list().setVisible(true);
    }//GEN-LAST:event_jButton7ActionPerformed

    private void jButton8ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton8ActionPerformed
       
        new void_bill().setVisible(true);
    }//GEN-LAST:event_jButton8ActionPerformed

    private void set_expenses_data() {

        try {
            ResultSet rs_expenses = MC_DB.search_dataQuery("SELECT DAYNAME(date) "
                    + "AS day_of_week, SUM(amount) AS total_amount FROM expenses "
                    + "WHERE WEEK(date, 1) = WEEK(CURDATE(), 1) AND YEAR(date) = YEAR(CURDATE()) "
                    + "GROUP BY DAYOFWEEK(date) "
                    + "ORDER BY DAYOFWEEK(date)");
            Map<String, Double> totals = new HashMap<>();

            while (rs_expenses.next()) {
                String dayOfWeek = rs_expenses.getString("day_of_week");
                double totalAmount = rs_expenses.getDouble("total_amount");
                totals.put(dayOfWeek, totalAmount);
            }

            // Ensure all days are present in the totals map
            for (String day : new String[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}) {
                totals.putIfAbsent(day, 0.0);
            }

            updateChart(totals);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    private void test(Map<String, Double> totals) {
        curveLineChart1.clear();
        curveLineChart1.addData(new raven.chart.ModelChart("M", new double[]{totals.getOrDefault("Monday", 0.0)}));
        curveLineChart1.addData(new raven.chart.ModelChart("T", new double[]{totals.getOrDefault("Tuesday", 0.0)}));
        curveLineChart1.addData(new raven.chart.ModelChart("W", new double[]{totals.getOrDefault("Wednesday", 0.0)}));
        curveLineChart1.addData(new raven.chart.ModelChart("T", new double[]{totals.getOrDefault("Thursday", 0.0)}));
        curveLineChart1.addData(new raven.chart.ModelChart("F", new double[]{totals.getOrDefault("Friday", 0.0)}));
        curveLineChart1.addData(new raven.chart.ModelChart("S", new double[]{totals.getOrDefault("Saturday", 0.0)}));
        curveLineChart1.addData(new raven.chart.ModelChart("S", new double[]{totals.getOrDefault("Suday", 0.0)}));

        curveLineChart1.start();
    }

    public void updateChart(Map<String, Double> totals) {
        curveLineChart2.clear();

        // Add data to the chart
        curveLineChart2.addData(new raven.chart.ModelChart("M", new double[]{totals.getOrDefault("Monday", 0.0)}));
        curveLineChart2.addData(new raven.chart.ModelChart("T", new double[]{totals.getOrDefault("Tuesday", 0.0)}));
        curveLineChart2.addData(new raven.chart.ModelChart("W", new double[]{totals.getOrDefault("Wednesday", 0.0)}));
        curveLineChart2.addData(new raven.chart.ModelChart("T", new double[]{totals.getOrDefault("Thursday", 0.0)}));
        curveLineChart2.addData(new raven.chart.ModelChart("F", new double[]{totals.getOrDefault("Friday", 0.0)}));
        curveLineChart2.addData(new raven.chart.ModelChart("S", new double[]{totals.getOrDefault("Saturday", 0.0)}));
        curveLineChart2.addData(new raven.chart.ModelChart("S", new double[]{totals.getOrDefault("Sunday", 0.0)}));

        curveLineChart2.start();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private animeted.chart.Chart chart;
    private animeted.chart.Chart chart1;
    private raven.chart.CurveLineChart curveLineChart1;
    private raven.chart.CurveLineChart curveLineChart2;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton10;
    private javax.swing.JButton jButton11;
    private javax.swing.JButton jButton12;
    private javax.swing.JButton jButton13;
    private javax.swing.JButton jButton14;
    private javax.swing.JButton jButton15;
    private javax.swing.JButton jButton16;
    private javax.swing.JButton jButton17;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JButton jButton4;
    private javax.swing.JButton jButton5;
    private javax.swing.JButton jButton6;
    private javax.swing.JButton jButton7;
    private javax.swing.JButton jButton8;
    private javax.swing.JButton jButton9;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JLabel lbl_month;
    private javax.swing.JLabel lbl_month_total;
    private javax.swing.JLabel lbl_stock_value;
    private javax.swing.JLabel lbl_total_sale_in_this_year;
    private javaswingdev.chart.PieChart pieChart1;
    // End of variables declaration//GEN-END:variables

    private void set_stock_value() {
        double tot = 0;
        try {
            ResultSet rs_stock = MC_DB.search_dataQuery("SELECT * FROM stock");
            while (rs_stock.next()) {
                double cost = rs_stock.getDouble("buy_price");
                double qty = rs_stock.getDouble("qty");
                double val = cost * qty;
                tot = tot + val;
            }
            lbl_stock_value.setText("Total Stock Value :" + new DecimalFormat("#,##0.00").format(tot));
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void set_yearly_sale_total() {
        try {
            ResultSet rs_invoice = MC_DB.search_dataQuery("SELECT SUM(`total`) AS total_sum "
                    + "FROM `invoice` "
                    + "WHERE `date` BETWEEN DATE_FORMAT(CURDATE(), '%Y-01-01') AND DATE_FORMAT(CURDATE(), '%Y-12-31')");
            if (rs_invoice.next()) {
                double totalSum = rs_invoice.getDouble("total_sum");
                String formattedTotalSum = formatToThousandsWithSeparator(totalSum);
                lbl_total_sale_in_this_year.setText(formattedTotalSum);
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private String formatToThousandsWithSeparator(double amount) {
        NumberFormat numberFormat = NumberFormat.getNumberInstance(Locale.US);
        if (amount >= 1000) {
            double amountInThousands = amount / 1000;
            return numberFormat.format(amountInThousands) + "K";
        }
        return numberFormat.format(amount);
    }

    private void set_highest_month() {
        try {
            ResultSet rs_month = MC_DB.search_dataQuery("SELECT "
                    + "MONTH(`date`) AS month, "
                    + "SUM(`total`) AS total_sum "
                    + "FROM `invoice` "
                    + "WHERE `date` BETWEEN DATE_FORMAT(CURDATE(), '%Y-01-01') AND DATE_FORMAT(CURDATE(), '%Y-12-31') "
                    + "GROUP BY MONTH(`date`) "
                    + "ORDER BY total_sum DESC "
                    + "LIMIT 1");
            if (rs_month.next()) {
                int month = rs_month.getInt("month");
                double totalSum = rs_month.getDouble("total_sum");
                String monthName = new DateFormatSymbols().getMonths()[month - 1];

                lbl_month.setText(monthName + " (" + month + ")");
                lbl_month_total.setText(new DecimalFormat("#,##0.00").format(totalSum));

            } else {
                lbl_month.setText("January");
                lbl_month_total.setText("0.00");
            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void set_sale() {
        try {
            ResultSet rs_expenses = MC_DB.search_dataQuery("SELECT DAYNAME(date) "
                    + "AS day_of_week, SUM(total) AS total_amount FROM invoice "
                    + "WHERE WEEK(date, 1) = WEEK(CURDATE(), 1) AND YEAR(date) = YEAR(CURDATE()) "
                    + "GROUP BY DAYOFWEEK(date) "
                    + "ORDER BY DAYOFWEEK(date)");
            Map<String, Double> totals = new HashMap<>();

            while (rs_expenses.next()) {
                String dayOfWeek = rs_expenses.getString("day_of_week");
                double totalAmount = rs_expenses.getDouble("total_amount");
                totals.put(dayOfWeek, totalAmount);
            }

            // Ensure all days are present in the totals map
            for (String day : new String[]{"Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"}) {
                totals.putIfAbsent(day, 0.0);
            }

            test(totals);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

    }

    private void set_all_chart_design() {
        chart.addLegend("Income", new Color(148, 177, 255));
        chart.addLegend("Expense", new Color(247, 145, 11));
        chart.addLegend("Purches", new Color(137, 50, 0));

        chart1.addLegend("Cash", new Color(0, 212, 205));
        chart1.addLegend("Credit", new Color(156, 253, 156));
        chart1.addLegend("Card", new Color(255, 195, 93));

        chart.addData(new ModelChart("January", new double[]{s1, e1, g1}));
        chart.addData(new ModelChart("February", new double[]{s2, e2, g2}));
        chart.addData(new ModelChart("March", new double[]{s3, e3, g3}));
        chart.addData(new ModelChart("April", new double[]{s4, e4, g4}));
        chart.addData(new ModelChart("May", new double[]{s5, e5, g5}));
        chart.addData(new ModelChart("June", new double[]{s6, e6, g6}));
        chart.addData(new ModelChart("July", new double[]{s7, e7, g7}));
        chart.addData(new ModelChart("August", new double[]{s8, e8, g8}));
        chart.addData(new ModelChart("September", new double[]{s9, e9, g9}));
        chart.addData(new ModelChart("Octomber", new double[]{s10, e10, g10}));
        chart.addData(new ModelChart("November", new double[]{s11, e11, g11}));
        chart.addData(new ModelChart("December", new double[]{s12, e12, g12}));
        chart.start();

        chart1.addData(new ModelChart("Monday", new double[]{d1, dc1, c1}));
        chart1.addData(new ModelChart("Tuesday", new double[]{d2, dc2, c2}));
        chart1.addData(new ModelChart("Wednesday", new double[]{d3, dc3, c3}));
        chart1.addData(new ModelChart("Thursday", new double[]{d4, dc4, c4}));
        chart1.addData(new ModelChart("Friday", new double[]{d5, dc5, c5}));
        chart1.addData(new ModelChart("Saturday", new double[]{d6, dc6, c6}));
        chart1.addData(new ModelChart("Sunday", new double[]{d7, dc7, c7}));
        chart1.start();

        curveLineChart1.addLegend("Sale", Color.decode("#7b4397"), Color.decode("#dc2430"));
        curveLineChart2.addLegend("Expenses", Color.decode("#e65c00"), Color.decode("#F9D423"));

    }
    double d_sale, d_grn, d_expenses;

    private void set_pie_chart_data() {
        d_sale = 0.00;
        d_grn = 0.00;
        d_expenses = 0.00;
        set_this_month_sale();
        set_this_month_grn();
        set_this_month_expenses();
        pieChart1.setChartType(PieChart.PeiChartType.DONUT_CHART);
        pieChart1.addData(new ModelPieChart("Sales", d_sale, new Color(23, 126, 238)));
        pieChart1.addData(new ModelPieChart("Expenses", d_expenses, new Color(221, 65, 65)));
        pieChart1.addData(new ModelPieChart("Purches", d_grn, new Color(196, 151, 58)));

    }

    private void set_this_month_sale() {
        try {
            ResultSet rs_sale = MC_DB.search_dataQuery("SELECT "
                    + "SUM(`total`) AS total_sum "
                    + "FROM `invoice` "
                    + "WHERE YEAR(`date`) = YEAR(CURDATE()) AND MONTH(`date`) = MONTH(CURDATE())");
            if (rs_sale.next()) {
                d_sale = rs_sale.getDouble("total_sum");

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void set_this_month_grn() {
        try {
            ResultSet rs_sale = MC_DB.search_dataQuery("SELECT "
                    + "SUM(`grn_tot`) AS total_sum "
                    + "FROM `grn_details` "
                    + "WHERE YEAR(`date`) = YEAR(CURDATE()) AND MONTH(`date`) = MONTH(CURDATE())");
            if (rs_sale.next()) {
                d_grn = rs_sale.getDouble("total_sum");

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void set_this_month_expenses() {
        try {
            ResultSet rs_sale = MC_DB.search_dataQuery("SELECT "
                    + "SUM(`amount`) AS total_sum "
                    + "FROM `expenses` "
                    + "WHERE YEAR(`date`) = YEAR(CURDATE()) AND MONTH(`date`) = MONTH(CURDATE())");
            if (rs_sale.next()) {
                d_expenses = rs_sale.getDouble("total_sum");

            }
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void loadTopSales() {
        DefaultTableModel dtm = (DefaultTableModel) jTable1.getModel();
        try {
            ResultSet rs_invo = MC_DB.search_dataQuery("SELECT ir.name, FORMAT(ir.qty, 3) AS qty_formatted "
                    + "FROM invoice_repeated AS ir "
                    + "JOIN invoice AS i ON ir.invo_no = i.inv_no "
                    + "WHERE MONTH(i.date) = MONTH(CURRENT_DATE()) "
                    + "AND YEAR(i.date) = YEAR(CURRENT_DATE()) "
                    + "ORDER BY ir.qty DESC LIMIT 10");

            while (rs_invo.next()) {
                Vector<Object> v = new Vector<>();
                v.add(rs_invo.getString("name"));
                v.add(rs_invo.getString("qty_formatted")); // Use formatted quantity

                dtm.addRow(v);
            }

            // Custom cell renderer for specific column formatting
            DefaultTableCellRenderer customRenderer = new DefaultTableCellRenderer() {
                @Override
                public java.awt.Component getTableCellRendererComponent(javax.swing.JTable table, Object value, boolean isSelected, boolean hasFocus, int row, int column) {
                    java.awt.Component cell = super.getTableCellRendererComponent(table, value, isSelected, hasFocus, row, column);

                    // Right align specific columns
                    if (column == 1) {
                        setHorizontalAlignment(DefaultTableCellRenderer.RIGHT);
                    } else {
                        setHorizontalAlignment(DefaultTableCellRenderer.LEFT);
                    }

                    return cell;
                }
            };

            // Apply the custom renderer to the quantity column (index 1)
            jTable1.getColumnModel().getColumn(1).setCellRenderer(customRenderer);

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    double g1, g2, g3, g4, g5, g6, g7, g8, g9, g10, g11, g12;
    double s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12;
    double e1, e2, e3, e4, e5, e6, e7, e8, e9, e10, e11, e12;

    public void loadGrns() {
        g1 = 0.00;
        g2 = 0.00;
        g3 = 0.00;
        g4 = 0.00;
        g5 = 0.00;
        g6 = 0.00;
        g7 = 0.00;
        g8 = 0.00;
        g9 = 0.00;
        g10 = 0.00;
        g11 = 0.00;
        g12 = 0.00;
        try {

            ResultSet rs_grn = MC_DB.search_dataQuery("SELECT MONTH(`date`) AS month, SUM(`grn_tot`) AS total_grn FROM grn_details WHERE YEAR(`date`) = YEAR(CURDATE()) GROUP BY MONTH(`date`)");

            // Process the ResultSet and update string variables
            while (rs_grn.next()) {
                int month = rs_grn.getInt("month");
                double totalGrn = rs_grn.getDouble("total_grn");

                // Update the corresponding month string variable (adjust for 1-based month indexing)
                switch (month) {
                    case 1:
                        g1 = totalGrn;
                        break;
                    case 2:
                        g2 = totalGrn;
                        break;
                    case 3:
                        g3 = totalGrn;
                        break;
                    case 4:
                        g4 = totalGrn;
                        break;
                    case 5:
                        g5 = totalGrn;
                        break;
                    case 6:
                        g6 = totalGrn;
                        break;
                    case 7:
                        g7 = totalGrn;
                        break;
                    case 8:
                        g8 = totalGrn;
                        break;
                    case 9:
                        g9 = totalGrn;
                        break;
                    case 10:
                        g10 = totalGrn;
                        break;
                    case 11:
                        g11 = totalGrn;
                        break;
                    case 12:
                        g12 = totalGrn;
                        break;
                    default:
                        break;
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    public void loadSale() {
        s1 = 0.00;
        s2 = 0.00;
        s3 = 0.00;
        s4 = 0.00;
        s5 = 0.00;
        s6 = 0.00;
        s7 = 0.00;
        s8 = 0.00;
        s9 = 0.00;
        s10 = 0.00;
        s11 = 0.00;
        s12 = 0.00;
        try {

            ResultSet rs_grn = MC_DB.search_dataQuery("SELECT MONTH(`date`) AS month, SUM(`total`) AS total_inv FROM invoice WHERE YEAR(`date`) = YEAR(CURDATE()) GROUP BY MONTH(`date`)");

            // Process the ResultSet and update string variables
            while (rs_grn.next()) {
                int month = rs_grn.getInt("month");
                double totalGrn = rs_grn.getDouble("total_inv");

                // Update the corresponding month string variable (adjust for 1-based month indexing)
                switch (month) {
                    case 1:
                        s1 = totalGrn;
                        break;
                    case 2:
                        s2 = totalGrn;
                        break;
                    case 3:
                        s3 = totalGrn;
                        break;
                    case 4:
                        s4 = totalGrn;
                        break;
                    case 5:
                        s5 = totalGrn;
                        break;
                    case 6:
                        s6 = totalGrn;
                        break;
                    case 7:
                        s7 = totalGrn;
                        break;
                    case 8:
                        s8 = totalGrn;
                        break;
                    case 9:
                        s9 = totalGrn;
                        break;
                    case 10:
                        s10 = totalGrn;
                        break;
                    case 11:
                        s11 = totalGrn;
                        break;
                    case 12:
                        s12 = totalGrn;
                        break;
                    default:
                        break;
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void loadExpenses() {
        e1 = 0.00;
        e2 = 0.00;
        e3 = 0.00;
        e4 = 0.00;
        e5 = 0.00;
        e6 = 0.00;
        e7 = 0.00;
        e8 = 0.00;
        e9 = 0.00;
        e10 = 0.00;
        e11 = 0.00;
        e12 = 0.00;
        try {

            ResultSet rs_grn = MC_DB.search_dataQuery("SELECT MONTH(`date`) AS month, SUM(`amount`) AS total_exp FROM expenses WHERE YEAR(`date`) = YEAR(CURDATE()) GROUP BY MONTH(`date`)");

            // Process the ResultSet and update string variables
            while (rs_grn.next()) {
                int month = rs_grn.getInt("month");
                double totalGrn = rs_grn.getDouble("total_exp");

                // Update the corresponding month string variable (adjust for 1-based month indexing)
                switch (month) {
                    case 1:
                        e1 = totalGrn;
                        break;
                    case 2:
                        e2 = totalGrn;
                        break;
                    case 3:
                        e3 = totalGrn;
                        break;
                    case 4:
                        e4 = totalGrn;
                        break;
                    case 5:
                        e5 = totalGrn;
                        break;
                    case 6:
                        e6 = totalGrn;
                        break;
                    case 7:
                        e7 = totalGrn;
                        break;
                    case 8:
                        e8 = totalGrn;
                        break;
                    case 9:
                        e9 = totalGrn;
                        break;
                    case 10:
                        e10 = totalGrn;
                        break;
                    case 11:
                        e11 = totalGrn;
                        break;
                    case 12:
                        e12 = totalGrn;
                        break;
                    default:
                        break;
                }
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

        double d1 = 0.0, d2 = 0.0, d3 = 0.0, d4 = 0.0, d5 = 0.0, d6 = 0.0, d7 = 0.0;
        double dc1 = 0.0, dc2 = 0.0, dc3 = 0.0, dc4 = 0.0, dc5 = 0.0, dc6 = 0.0, dc7 = 0.0;
        double c1 = 0.0, c2 = 0.0, c3 = 0.0, c4 = 0.0, c5 = 0.0, c6 = 0.0, c7 = 0.0;
        
        
    private void loadCash() {

        try {
            // Query to fetch current year, current week cash totals
            String query = "SELECT `total` FROM invoice "
                    + "WHERE YEAR(`date`) = YEAR(CURDATE()) "
                    + "AND WEEK(`date`) = WEEK(CURDATE()) "
                    + "AND `type` = 'Cash'";

            // Execute the query
            ResultSet rs = MC_DB.search_dataQuery(query);

            // Process the ResultSet and assign values to variables
            int count = 1;
            while (rs.next() && count <= 7) {
                switch (count) {
                    case 1:
                        d1 = rs.getDouble("total");
                        break;
                    case 2:
                        d2 = rs.getDouble("total");
                        break;
                    case 3:
                        d3 = rs.getDouble("total");
                        break;
                    case 4:
                        d4 = rs.getDouble("total");
                        break;
                    case 5:
                        d5 = rs.getDouble("total");
                        break;
                    case 6:
                        d6 = rs.getDouble("total");
                        break;
                    case 7:
                        d7 = rs.getDouble("total");
                        break;
                    default:
                        break;
                }
                count++;
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    private void loadCredit() {

        try {
            // Query to fetch current year, current week cash totals
            String query = "SELECT `total` FROM invoice "
                    + "WHERE YEAR(`date`) = YEAR(CURDATE()) "
                    + "AND WEEK(`date`,1) = WEEK(CURDATE(),1) "
                    + "AND `type` = 'Credit'";

            // Execute the query
            ResultSet rs = MC_DB.search_dataQuery(query);

            // Process the ResultSet and assign values to variables
            int count = 1;
            while (rs.next() && count <= 7) {
                switch (count) {
                    case 1:
                        dc1 = rs.getDouble("total");
                        break;
                    case 2:
                        dc2 = rs.getDouble("total");
                        break;
                    case 3:
                        dc3 = rs.getDouble("total");
                        break;
                    case 4:
                        dc4 = rs.getDouble("total");
                        break;
                    case 5:
                        dc5 = rs.getDouble("total");
                        break;
                    case 6:
                        dc6 = rs.getDouble("total");
                        break;
                    case 7:
                        dc7 = rs.getDouble("total");
                        break;
                    default:
                        break;
                }
                count++;
               
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void loadCard() {
    
        try {
            // Query to fetch current year, current week cash totals
            String query = "SELECT `total` FROM invoice "
                    + "WHERE YEAR(`date`) = YEAR(CURDATE()) "
                    + "AND WEEK(`date`) = WEEK(CURDATE()) "
                    + "AND `type` = 'Card'";

            // Execute the query
            ResultSet rs = MC_DB.search_dataQuery(query);

            // Process the ResultSet and assign values to variables
            int count = 1;
            while (rs.next() && count <= 7) {
                switch (count) {
                    case 1:
                        c1 = rs.getDouble("total");
                        break;
                    case 2:
                        c2 = rs.getDouble("total");
                        break;
                    case 3:
                        c3 = rs.getDouble("total");
                        break;
                    case 4:
                        c4 = rs.getDouble("total");
                        break;
                    case 5:
                        c5 = rs.getDouble("total");
                        break;
                    case 6:
                        c6 = rs.getDouble("total");
                        break;
                    case 7:
                        c7 = rs.getDouble("total");
                        break;
                    default:
                        break;
                }
                count++;
            }

        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

}
