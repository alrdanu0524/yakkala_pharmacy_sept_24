/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package easypos;

import DB.MC_DB;
import java.awt.Color;
import java.awt.Font;
import java.awt.font.TextAttribute;
import java.io.FileInputStream;
import java.io.InputStream;
import java.sql.ResultSet;
import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.HashMap;
import java.util.Map;
import net.sf.jasperreports.engine.JasperCompileManager;
import net.sf.jasperreports.engine.JasperFillManager;
import net.sf.jasperreports.engine.JasperPrint;
import net.sf.jasperreports.engine.JasperReport;
import net.sf.jasperreports.view.JRViewer;

/**
 *
 * @author hello
 */
public class all_reports extends javax.swing.JFrame {

    /**
     * Creates new form all_reports
     */
    SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd");
    SimpleDateFormat sdf1 = new SimpleDateFormat("yyyy/MM/dd");

    public all_reports() {
        initComponents();
        setExtendedState(MAXIMIZED_BOTH);
        Date toDay = new Date();
        jDateChooser1.setDate(toDay);
        jDateChooser2.setDate(toDay);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        lbl_report_name = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jDateChooser1 = new com.toedter.calendar.JDateChooser();
        jLabel3 = new javax.swing.JLabel();
        jDateChooser2 = new com.toedter.calendar.JDateChooser();
        myButton1 = new button.MyButton();
        jSeparator1 = new javax.swing.JSeparator();
        jScrollPane1 = new javax.swing.JScrollPane();
        jPanel4 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        jLabel17 = new javax.swing.JLabel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jButton17 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        lbl_report_name.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        lbl_report_name.setForeground(new java.awt.Color(0, 0, 102));

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel2.setText("From :");

        jDateChooser1.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("To :");

        jDateChooser2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N

        myButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-create-20.png"))); // NOI18N
        myButton1.setText("Generate");
        myButton1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        myButton1.setRadius(9);
        myButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                myButton1ActionPerformed(evt);
            }
        });

        jPanel4.setBackground(new java.awt.Color(255, 255, 255));

        jLabel4.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-reports-16.png"))); // NOI18N
        jLabel4.setText("All Products");
        jLabel4.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel4MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel4MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel4MouseExited(evt);
            }
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jLabel4MousePressed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-reports-16.png"))); // NOI18N
        jLabel1.setText("Current Stock");
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel1MouseExited(evt);
            }
        });

        jLabel5.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel5.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-reports-16.png"))); // NOI18N
        jLabel5.setText("Re Order Items");
        jLabel5.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel5MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel5MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel5MouseExited(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel6.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-reports-16.png"))); // NOI18N
        jLabel6.setText("Income Report (By Period)");
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel6MouseExited(evt);
            }
        });

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-reports-16.png"))); // NOI18N
        jLabel7.setText("Invoice Details (By Period)");
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel7MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel7MouseExited(evt);
            }
        });

        jLabel8.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel8.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-reports-16.png"))); // NOI18N
        jLabel8.setText("Sales Report (By Period)");
        jLabel8.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel8MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel8MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel8MouseExited(evt);
            }
        });

        jLabel9.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel9.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-reports-16.png"))); // NOI18N
        jLabel9.setText("Customer Details");
        jLabel9.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel9MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel9MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel9MouseExited(evt);
            }
        });

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel12.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-reports-16.png"))); // NOI18N
        jLabel12.setText("Goods Received Notes Details (By Period)");
        jLabel12.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel12MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel12MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel12MouseExited(evt);
            }
        });

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel13.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-reports-16.png"))); // NOI18N
        jLabel13.setText("Goods Received Notes -Items (By Period)");
        jLabel13.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel13MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel13MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel13MouseExited(evt);
            }
        });

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel14.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-reports-16.png"))); // NOI18N
        jLabel14.setText("Supplier Details");
        jLabel14.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel14MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel14MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel14MouseExited(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-reports-16.png"))); // NOI18N
        jLabel17.setText("Expenses Details (By Period)");
        jLabel17.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel17MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel17MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel17MouseExited(evt);
            }
        });

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel18.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-reports-16.png"))); // NOI18N
        jLabel18.setText("Summery (By Period)");
        jLabel18.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel18MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel18MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel18MouseExited(evt);
            }
        });

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel19.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-reports-16.png"))); // NOI18N
        jLabel19.setText("Fast Moving Items (By Period)");
        jLabel19.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel19MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel19MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel19MouseExited(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel12, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel13, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel14, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel17, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel18, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLabel19, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel8, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel14, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel17, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel19, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel18, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(105, Short.MAX_VALUE))
        );

        jScrollPane1.setViewportView(jPanel4);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(lbl_report_name, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jSeparator1))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jLabel3, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 58, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(myButton1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap())
            .addComponent(jScrollPane1)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(lbl_report_name, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDateChooser1, javax.swing.GroupLayout.DEFAULT_SIZE, 28, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jDateChooser2, javax.swing.GroupLayout.DEFAULT_SIZE, 31, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(myButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1))
        );

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));
        jPanel3.setBorder(new javax.swing.border.LineBorder(new java.awt.Color(0, 0, 0), 1, true));
        jPanel3.setLayout(new java.awt.BorderLayout());

        jButton17.setIcon(new javax.swing.ImageIcon(getClass().getResource("/icons/icons8-home-24.png"))); // NOI18N
        jButton17.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton17ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel5Layout = new javax.swing.GroupLayout(jPanel5);
        jPanel5.setLayout(jPanel5Layout);
        jPanel5Layout.setHorizontalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel5Layout.createSequentialGroup()
                .addGap(0, 496, Short.MAX_VALUE)
                .addComponent(jButton17, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel5Layout.setVerticalGroup(
            jPanel5Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jButton17)
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel5, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel5, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, 0)
                .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel4MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MousePressed
        // TODO add your handling code here:
    }//GEN-LAST:event_jLabel4MousePressed

    private void jLabel4MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseClicked
        lbl_report_name.setText(jLabel4.getText());
    }//GEN-LAST:event_jLabel4MouseClicked
    boolean underline;
    private void jLabel4MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseEntered
        underline = true;
        Font font = jLabel4.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel4.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel4.setForeground(Color.black);
        }

        jLabel4.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel4MouseEntered

    private void jLabel4MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel4MouseExited
        underline = false;
        Font font = jLabel4.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel4.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel4.setForeground(Color.black);
        }

        jLabel4.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel4MouseExited

    private void jButton17ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton17ActionPerformed
        new Dashboard_001().setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jButton17ActionPerformed

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked
        lbl_report_name.setText(jLabel1.getText());
    }//GEN-LAST:event_jLabel1MouseClicked

    private void jLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseEntered
        underline = true;
        Font font = jLabel1.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel1.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel1.setForeground(Color.black);
        }

        jLabel1.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel1MouseEntered

    private void jLabel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseExited
        underline = false;
        Font font = jLabel1.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel1.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel1.setForeground(Color.black);
        }

        jLabel1.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel1MouseExited

    private void jLabel5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseClicked
        lbl_report_name.setText(jLabel5.getText());
    }//GEN-LAST:event_jLabel5MouseClicked

    private void jLabel5MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseEntered
        underline = true;
        Font font = jLabel5.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel5.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel5.setForeground(Color.black);
        }

        jLabel5.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel5MouseEntered

    private void jLabel5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel5MouseExited
        underline = false;
        Font font = jLabel5.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel5.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel5.setForeground(Color.black);
        }

        jLabel5.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel5MouseExited
    String reportName;
    private void myButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_myButton1ActionPerformed
        reportName = lbl_report_name.getText().trim();

        if (reportName.equals("All Products")) {
            allProducts();
        } else if (reportName.equals("Current Stock")) {
            currentStock();
        } else if (reportName.equals("Re Order Items")) {
            reorderItems();
        } else if (reportName.equals("Income Report (By Period)")) {
            incomeReport();
        } else if (reportName.equals("Sales Report (By Period)")) {
            salesReport();
        } else if (reportName.equals("Invoice Details (By Period)")) {
            invoiceDetails();
        } else if (reportName.equals("Customer Details")) {
            customerDetails();
        } else if (reportName.equals("Customer Payment Details (By Period)")) {
            customerPaymentDetails();
        } else if (reportName.equals("All Customer Payment Details (By Period)")) {
            allCustomerPaymentDetails();
        } else if (reportName.equals("Goods Received Notes Details (By Period)")) {
            grnDetails();
        } else if (reportName.equals("Goods Received Notes -Items (By Period)")) {
            grnDetailsItem();
        } else if (reportName.equals("Supplier Details")) {
            supplierDetails();
        } else if (reportName.equals("All Supplier Payment Details (By Period)")) {
            allSupplierCreditDetails();
        } else if (reportName.equals("Supplier Payment Details (By Period)")) {
            supplierCreditDetails();
        } else if (reportName.equals("Expenses Details (By Period)")) {
            expensesDetails();
        } else if (reportName.equals("Summery (By Period)")) {
            totalIncome();
            cashIn();
            cashOut();
            grnPayments();
            totalExpenses();
            cardPayment();
            cashPayment();
            calculateDetails();
            printReport();
        } else if (reportName.equals("Fast Moving Items (By Period)")) {
            fastMovingItems();
        }

    }//GEN-LAST:event_myButton1ActionPerformed

    double d_totalIncome, d_cashIn, d_cashOut, d_grnTotal, d_totalExpenses, d_cardPayment, d_cashPayment, d_netTotal, d_shortOrExhast;

    private void calculateDetails() {
        d_netTotal = d_cashIn + d_cashPayment - d_totalExpenses;
        d_shortOrExhast = d_cashOut - d_netTotal;
    }

    private void cardPayment() {
        String date1 = sdf.format(jDateChooser1.getDate());
        String date2 = sdf.format(jDateChooser2.getDate());
        d_cardPayment = 0;
        try {
            ResultSet rs_invoice = MC_DB.search_dataQuery("SELECT * FROM invoice WHERE date BETWEEN '" + date1 + "' AND '" + date2 + "' AND type = 'Card' ");

            while (rs_invoice.next()) {
                d_cardPayment += rs_invoice.getDouble("total");
            }
            System.out.println(d_cardPayment);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void cashPayment() {
        String date1 = sdf.format(jDateChooser1.getDate());
        String date2 = sdf.format(jDateChooser2.getDate());
        d_cashPayment = 0;
        try {
            ResultSet rs_invoice = MC_DB.search_dataQuery("SELECT * FROM invoice WHERE date BETWEEN '" + date1 + "' AND '" + date2 + "' AND type = 'Cash' ");

            while (rs_invoice.next()) {
                d_cashPayment += rs_invoice.getDouble("total");
            }
            System.out.println(d_cashPayment);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void totalExpenses() {
        String date1 = sdf.format(jDateChooser1.getDate());
        String date2 = sdf.format(jDateChooser2.getDate());
        d_totalExpenses = 0;
        try {
            ResultSet rs_invoice = MC_DB.search_dataQuery("SELECT * FROM expenses WHERE date BETWEEN '" + date1 + "' AND '" + date2 + "' ");

            while (rs_invoice.next()) {
                d_totalExpenses += rs_invoice.getDouble("amount");
            }
            System.out.println(d_totalExpenses);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void grnPayments() {
        String date1 = sdf.format(jDateChooser1.getDate());
        String date2 = sdf.format(jDateChooser2.getDate());
        d_grnTotal = 0;
        try {
            ResultSet rs_invoice = MC_DB.search_dataQuery("SELECT * FROM grn_details WHERE date BETWEEN '" + date1 + "' AND '" + date2 + "' ");

            while (rs_invoice.next()) {
                d_grnTotal += rs_invoice.getDouble("grn_tot");
            }
            System.out.println(d_grnTotal);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void cashIn() {
        String date1 = sdf1.format(jDateChooser1.getDate());
        String date2 = sdf1.format(jDateChooser2.getDate());
        d_cashIn = 0;
        try {
            ResultSet rs_invoice = MC_DB.search_dataQuery("SELECT * FROM tb_cash_in_out WHERE date BETWEEN '" + date1 + "' AND '" + date2 + "' AND issue_type = 'Cash In' ");

            while (rs_invoice.next()) {
                d_cashIn += rs_invoice.getDouble("amount");
            }
            System.out.println(d_cashIn);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void cashOut() {
        String date1 = sdf1.format(jDateChooser1.getDate());
        String date2 = sdf1.format(jDateChooser2.getDate());
        d_cashOut = 0;
        try {
            ResultSet rs_invoice = MC_DB.search_dataQuery("SELECT * FROM tb_cash_in_out WHERE date BETWEEN '" + date1 + "' AND '" + date2 + "' AND issue_type = 'Cash Out' ");

            while (rs_invoice.next()) {
                d_cashOut += rs_invoice.getDouble("amount");
            }
            System.out.println(d_cashOut);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void totalIncome() {
        String date1 = sdf.format(jDateChooser1.getDate());
        String date2 = sdf.format(jDateChooser2.getDate());
        d_totalIncome = 0;
        try {
            ResultSet rs_invoice = MC_DB.search_dataQuery("SELECT * FROM invoice WHERE date BETWEEN '" + date1 + "' AND '" + date2 + "' ");

            while (rs_invoice.next()) {
                d_totalIncome += rs_invoice.getDouble("total");
            }
            System.out.println(d_totalIncome);
        } catch (Exception e) {
            e.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }


    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        lbl_report_name.setText(jLabel6.getText());
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseEntered
        underline = true;
        Font font = jLabel6.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel6.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel6.setForeground(Color.black);
        }

        jLabel6.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel6MouseEntered

    private void jLabel6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseExited
        underline = false;
        Font font = jLabel6.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel6.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel6.setForeground(Color.black);
        }

        jLabel6.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel6MouseExited

    private void jLabel8MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseClicked
        lbl_report_name.setText(jLabel8.getText());
    }//GEN-LAST:event_jLabel8MouseClicked

    private void jLabel8MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseEntered
        underline = true;
        Font font = jLabel8.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel8.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel8.setForeground(Color.black);
        }

        jLabel8.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel8MouseEntered

    private void jLabel8MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel8MouseExited
        underline = false;
        Font font = jLabel8.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel8.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel8.setForeground(Color.black);
        }

        jLabel8.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel8MouseExited

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        lbl_report_name.setText(jLabel7.getText());
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseEntered
        underline = true;
        Font font = jLabel7.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel7.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel7.setForeground(Color.black);
        }

        jLabel7.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel7MouseEntered

    private void jLabel7MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseExited
        underline = false;
        Font font = jLabel7.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel7.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel7.setForeground(Color.black);
        }

        jLabel7.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel7MouseExited

    private void jLabel9MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseClicked
        lbl_report_name.setText(jLabel9.getText());
    }//GEN-LAST:event_jLabel9MouseClicked

    private void jLabel9MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseEntered
        underline = true;
        Font font = jLabel9.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel9.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel9.setForeground(Color.black);
        }

        jLabel9.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel9MouseEntered

    private void jLabel9MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel9MouseExited
        underline = false;
        Font font = jLabel9.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel9.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel9.setForeground(Color.black);
        }

        jLabel9.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel9MouseExited

    private void jLabel12MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseClicked
        lbl_report_name.setText(jLabel12.getText());
    }//GEN-LAST:event_jLabel12MouseClicked

    private void jLabel12MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseEntered
        underline = true;
        Font font = jLabel12.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel12.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel12.setForeground(Color.black);
        }

        jLabel12.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel12MouseEntered

    private void jLabel12MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel12MouseExited
        underline = false;
        Font font = jLabel12.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel12.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel12.setForeground(Color.black);
        }

        jLabel12.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel12MouseExited

    private void jLabel13MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseClicked
        lbl_report_name.setText(jLabel13.getText());
    }//GEN-LAST:event_jLabel13MouseClicked

    private void jLabel13MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseEntered
        underline = true;
        Font font = jLabel13.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel13.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel13.setForeground(Color.black);
        }

        jLabel13.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel13MouseEntered

    private void jLabel13MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel13MouseExited
        underline = false;
        Font font = jLabel13.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel13.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel13.setForeground(Color.black);
        }

        jLabel13.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel13MouseExited

    private void jLabel14MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseClicked
        lbl_report_name.setText(jLabel14.getText());
    }//GEN-LAST:event_jLabel14MouseClicked

    private void jLabel14MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseEntered
        underline = true;
        Font font = jLabel14.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel14.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel14.setForeground(Color.black);
        }

        jLabel14.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel14MouseEntered

    private void jLabel14MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel14MouseExited
        underline = false;
        Font font = jLabel14.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel14.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel14.setForeground(Color.black);
        }

        jLabel14.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel14MouseExited

    private void jLabel17MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseClicked
        lbl_report_name.setText(jLabel17.getText());
    }//GEN-LAST:event_jLabel17MouseClicked

    private void jLabel17MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseEntered
        underline = true;
        Font font = jLabel17.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel17.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel17.setForeground(Color.black);
        }

        jLabel17.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel17MouseEntered

    private void jLabel17MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel17MouseExited
        underline = false;
        Font font = jLabel17.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel17.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel17.setForeground(Color.black);
        }

        jLabel17.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel17MouseExited

    private void jLabel18MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel18MouseClicked
        lbl_report_name.setText(jLabel18.getText());
    }//GEN-LAST:event_jLabel18MouseClicked

    private void jLabel18MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel18MouseEntered
        underline = true;
        Font font = jLabel18.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel18.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel18.setForeground(Color.black);
        }

        jLabel18.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel18MouseEntered

    private void jLabel18MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel18MouseExited
        underline = false;
        Font font = jLabel18.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel18.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel18.setForeground(Color.black);
        }

        jLabel18.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel18MouseExited

    private void jLabel19MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseClicked
        lbl_report_name.setText(jLabel19.getText());
    }//GEN-LAST:event_jLabel19MouseClicked

    private void jLabel19MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseEntered
        underline = true;
        Font font = jLabel19.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel19.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel19.setForeground(Color.black);
        }

        jLabel19.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel19MouseEntered

    private void jLabel19MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel19MouseExited
        underline = false;
        Font font = jLabel19.getFont();
        Map<TextAttribute, Object> attributes = new HashMap<>(font.getAttributes());

        if (underline) {
            attributes.put(TextAttribute.UNDERLINE, TextAttribute.UNDERLINE_ON);
            jLabel19.setForeground(Color.red);
        } else {
            attributes.put(TextAttribute.UNDERLINE, -1);
            jLabel19.setForeground(Color.black);
        }

        jLabel19.setFont(font.deriveFont(attributes));
    }//GEN-LAST:event_jLabel19MouseExited

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(all_reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(all_reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(all_reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(all_reports.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new all_reports().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton17;
    private com.toedter.calendar.JDateChooser jDateChooser1;
    private com.toedter.calendar.JDateChooser jDateChooser2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JLabel lbl_report_name;
    private button.MyButton myButton1;
    // End of variables declaration//GEN-END:variables

    private void allProducts() {
        try {
            InputStream in = new FileInputStream("src/product_list.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> parameters = new HashMap<>();

            JasperPrint jp = JasperFillManager.fillReport(jr, parameters, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void currentStock() {
        try {
            InputStream in = new FileInputStream("src/currentStock.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> parameters = new HashMap<>(); // Specify parameters if needed

            JasperPrint jp = JasperFillManager.fillReport(jr, parameters, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void reorderItems() {
        try {
            InputStream in = new FileInputStream("src/reorderItems.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> parameters = new HashMap<>(); // Specify parameters if needed

            JasperPrint jp = JasperFillManager.fillReport(jr, parameters, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void incomeReport() {
        try {
            InputStream in = new FileInputStream("src/allIncome.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> m = new HashMap<>(); // Specify parameters if needed
            m.put("date1", sdf.format(jDateChooser1.getDate()));
            m.put("date2", sdf.format(jDateChooser2.getDate()));

            JasperPrint jp = JasperFillManager.fillReport(jr, m, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            // Create JRViewer
            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            // Set JRViewer size to match jPanel3 size
            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void salesReport() {
        try {
            InputStream in = new FileInputStream("src/salesDetails.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> m = new HashMap<>(); // Specify parameters if needed
            m.put("date1", sdf.format(jDateChooser1.getDate()));
            m.put("date2", sdf.format(jDateChooser2.getDate()));

            JasperPrint jp = JasperFillManager.fillReport(jr, m, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            // Create JRViewer
            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            // Set JRViewer size to match jPanel3 size
            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void invoiceDetails() {
        try {
            InputStream in = new FileInputStream("src/allInvoices.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> m = new HashMap<>(); // Specify parameters if needed
            m.put("date1", sdf.format(jDateChooser1.getDate()));
            m.put("date2", sdf.format(jDateChooser2.getDate()));

            JasperPrint jp = JasperFillManager.fillReport(jr, m, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            // Create JRViewer
            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            // Set JRViewer size to match jPanel3 size
            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void customerDetails() {
        try {
            InputStream in = new FileInputStream("src/customerDetails.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> m = new HashMap<>(); // Specify parameters if needed

            JasperPrint jp = JasperFillManager.fillReport(jr, m, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            // Create JRViewer
            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            // Set JRViewer size to match jPanel3 size
            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }
    static String cus_name;

    private void customerPaymentDetails() {
        try {
            InputStream in = new FileInputStream("src/customerPaymentDetails.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> m = new HashMap<>(); // Specify parameters if needed
            m.put("date1", sdf.format(jDateChooser1.getDate()));
            m.put("date2", sdf.format(jDateChooser2.getDate()));
            m.put("cus_name", cus_name);

            JasperPrint jp = JasperFillManager.fillReport(jr, m, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            // Create JRViewer
            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            // Set JRViewer size to match jPanel3 size
            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void allCustomerPaymentDetails() {
        try {
            InputStream in = new FileInputStream("src/allCustomerPaymentDetails.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> m = new HashMap<>(); // Specify parameters if needed
            m.put("date1", sdf.format(jDateChooser1.getDate()));
            m.put("date2", sdf.format(jDateChooser2.getDate()));

            JasperPrint jp = JasperFillManager.fillReport(jr, m, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            // Create JRViewer
            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            // Set JRViewer size to match jPanel3 size
            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void grnDetails() {
        try {
            InputStream in = new FileInputStream("src/grn_all.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> m = new HashMap<>(); // Specify parameters if needed
            m.put("date1", sdf.format(jDateChooser1.getDate()));
            m.put("date2", sdf.format(jDateChooser2.getDate()));

            JasperPrint jp = JasperFillManager.fillReport(jr, m, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            // Create JRViewer
            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            // Set JRViewer size to match jPanel3 size
            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void grnDetailsItem() {
        try {
            InputStream in = new FileInputStream("src/grnWithItems.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> m = new HashMap<>(); // Specify parameters if needed
            m.put("date1", sdf.format(jDateChooser1.getDate()));
            m.put("date2", sdf.format(jDateChooser2.getDate()));

            JasperPrint jp = JasperFillManager.fillReport(jr, m, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            // Create JRViewer
            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            // Set JRViewer size to match jPanel3 size
            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void supplierDetails() {
        try {
            InputStream in = new FileInputStream("src/supplierDetails.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> m = new HashMap<>(); // Specify parameters if needed

            JasperPrint jp = JasperFillManager.fillReport(jr, m, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            // Create JRViewer
            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            // Set JRViewer size to match jPanel3 size
            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void allSupplierCreditDetails() {
        try {
            InputStream in = new FileInputStream("src/allSupplierPaymentDetails.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> m = new HashMap<>(); // Specify parameters if needed
            m.put("date1", sdf.format(jDateChooser1.getDate()));
            m.put("date2", sdf.format(jDateChooser2.getDate()));

            JasperPrint jp = JasperFillManager.fillReport(jr, m, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            // Create JRViewer
            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            // Set JRViewer size to match jPanel3 size
            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void supplierCreditDetails() {
        try {
            InputStream in = new FileInputStream("src/SupplierPaymentDetails.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> m = new HashMap<>(); // Specify parameters if needed
            m.put("date1", sdf.format(jDateChooser1.getDate()));
            m.put("date2", sdf.format(jDateChooser2.getDate()));
            m.put("cus_name", cus_name);

            JasperPrint jp = JasperFillManager.fillReport(jr, m, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            // Create JRViewer
            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            // Set JRViewer size to match jPanel3 size
            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void expensesDetails() {
        try {
            InputStream in = new FileInputStream("src/expensesDetails.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> m = new HashMap<>(); // Specify parameters if needed
            m.put("date1", sdf.format(jDateChooser1.getDate()));
            m.put("date2", sdf.format(jDateChooser2.getDate()));
            JasperPrint jp = JasperFillManager.fillReport(jr, m, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            // Create JRViewer
            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            // Set JRViewer size to match jPanel3 size
            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void printReport() {
        try {
            InputStream in = new FileInputStream("src/summeryDetails.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            // Create a DecimalFormat instance for formatting
            DecimalFormat df = new DecimalFormat("#,##0.00");

            Map<String, Object> m = new HashMap<>();
            m.put("date1", sdf.format(jDateChooser1.getDate()));
            m.put("date2", sdf.format(jDateChooser2.getDate()));
            m.put("totalIncome", df.format(d_totalIncome));
            m.put("cashIn", df.format(d_cashIn));
            m.put("cashOut", df.format(d_cashOut));
            m.put("grnValues", df.format(d_grnTotal));
            m.put("expenses", df.format(d_totalExpenses));
            m.put("cardPayment", df.format(d_cardPayment));
            m.put("cashPayment", df.format(d_cashPayment));
            m.put("netTotal", df.format(d_netTotal));
            m.put("shortExcess", df.format(d_shortOrExhast));

            JasperPrint jp = JasperFillManager.fillReport(jr, m, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            // Create JRViewer
            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            // Set JRViewer size to match jPanel3 size
            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();
        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

    private void fastMovingItems() {
        try {
            InputStream in = new FileInputStream("src/fastMovingItems.jrxml");
            JasperReport jr = JasperCompileManager.compileReport(in);

            Map<String, Object> m = new HashMap<>(); // Specify parameters if needed
            m.put("date1", sdf.format(jDateChooser1.getDate()));
            m.put("date2", sdf.format(jDateChooser2.getDate()));

            JasperPrint jp = JasperFillManager.fillReport(jr, m, MC_DB.myConnection());

            jPanel3.removeAll();
            jPanel3.repaint();

            // Create JRViewer
            JRViewer jrViewer = new JRViewer(jp);
            jPanel3.add(jrViewer);

            // Set JRViewer size to match jPanel3 size
            jrViewer.setSize(jPanel3.getSize());

            jPanel3.revalidate();
            jPanel3.repaint();

        } catch (Exception ex) {
            ex.printStackTrace();
        } finally {
            try {
                MC_DB.myConnection().close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }
    }

}
